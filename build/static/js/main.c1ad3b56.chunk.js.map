{"version":3,"sources":["Note.js","services/notes.js","Notification.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAaeA,EAXF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UACf,qBAAuB,iBAC3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCD5BK,G,MAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKd,UAAU,QAAf,SACGc,MCFDC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAKAC,EAAM,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAyBhBC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IAEH,IAqBMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAAvC,GAAI,OAAI,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBA9DtD,SAAAc,GACzB,IAAMf,EAAO0B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQ1C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACUpB,EAAI2B,GAAahC,MAAK,SAAAiC,GAC5BhB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO2C,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGfyC,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,SA+C4CgC,CAAmB/C,EAAKe,MAApEf,EAAKe,SAE3C,uBAAMiC,SArCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB9C,QAASuB,EACTwB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAGrBtB,EACUgB,GACPzC,MAAK,SAAAiC,GACJhB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,QAwBb,UACE,uBAAO8B,MAAO/B,EAASgC,SArBR,SAACX,GACpBpB,EAAWoB,EAAMY,OAAOF,UAqBpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QAKNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c1ad3b56.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios';\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React, {useState, useEffect} from 'react'\nimport ReactDOM from 'react-dom'\nimport Note from './Note';\nimport noteService from './services/notes';\nimport './index.css';\nimport Notification from './Notification';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  const notesToShow = showAll \n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={()=> toggleImportanceOf(note.id)}/>)}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}